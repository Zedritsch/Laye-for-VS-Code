{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Laye",
	"patterns": [
		{
			"name": "comment.block.laye",
			"begin": "/\\*",
			"end": "\\*/"
		},
		{
			"name": "comment.line.double-slash.laye",
			"match": "//.*"
		},
		{
			"name": "keyword.directive.laye",
			"match": "\\b(import|export|from|as)\\b"
		},
		{
			"name": "storage.modifier.laye",
			"match": "\\b(const|inline|readonly|writeonly)\\b"
		},
		{
			"name": "storage.type.laye",
			"match": "\\b(var|void|noreturn|rawptr|bool|b\\d+|int|i\\d+|uint|u\\d+|float|f16|f32|f64|f80|f128|struct|variant|enum|alias)\\b"
		},
		{
			"name": "storage.laye",
			"match": "\\b(varargs|foreign|callconv|test)\\b"
		},
		{
			"name": "keyword.control.conditional.laye",
			"match": "\\b(if|else|switch|case|default)\\b"
		},
		{
			"name": "keyword.control.loop.laye",
			"match": "\\b(for|do)\\b"
		},
		{
			"name": "keyword.control.flow.laye",
			"match": "\\b(return|break|continue|defer|goto)\\b"
		},
		{
			"name": "keyword.control.laye",
			"match": "\\b(new|delete|cast|try|catch|discard|sizeof|alignof|offsetof|not|and|or|xor|is|assert)\\b"
		},
		{
			"name": "keyword.operator.assignment.logical.laye",
			"match": "&=|\\|=|~=|<<=|>>="
		},
		{
			"name": "keyword.operator.assignment.arithmetic.laye",
			"match": "\\+=|-=|\\*=|/=|%="
		},
		{
			"name": "keyword.operator.logical.laye",
			"match": "<<|>>|[&|~]"
		},
		{
			"name": "keyword.operator.arithmetic.laye",
			"match": "[+\\-*/%]"
		},
		{
			"name": "keyword.operator.relational.laye",
			"match": "==|!=|<=|>=|[<>]"
		},
		{
			"name": "keyword.operator.laye",
			"match": "->|=>|[=?]"
		},
		{
			"name": "constant.language.laye",
			"match": "\\b(nil|global)\\b"
		},
		{
			"name": "constant.language.boolean.laye",
			"match": "\\b(true|false)\\b"
		},
		{
			"name": "string.quoted.single.laye",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.laye",
					"match": "\\\\'"
				},
				{
					"include": "#escape"
				}
			]
		},
		{
			"name": "string.quoted.double.laye",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.laye",
					"match": "\\\\\""
				},
				{
					"include": "#escape"
				}
			]
		},
		{
			"name": "punctuation.definition.laye",
			"match": "[\\(\\)\\[\\]\\{\\}]"
		},
		{
			"name": "punctuation.separator.laye",
			"match": "::|[.,;]"
		},
		{
			"name": "constant.numeric.laye",
			"match": "2#(([0-1]+_)?[0-1]+)+|3#(([0-2]+_)?[0-2]+)+|4#(([0-3]+_)?[0-3]+)+|5#(([0-4]+_)?[0-4]+)+|6#(([0-5]+_)?[0-5]+)+|7#(([0-6]+_)?[0-6]+)+|8#(([0-7]+_)?[0-7]+)+|9#(([0-8]+_)?[0-8]+)+|10#(([0-9]+_)?[0-9]+)+|11#(([0-9aA]+_)?[0-9aA]+)+|12#(([0-9a-bA-B]+_)?[0-9a-bA-B]+)+|13#(([0-9a-cA-C]+_)?[0-9a-cA-C]+)+|14#(([0-9a-dA-D]+_)?[0-9a-dA-D]+)+|15#(([0-9a-eA-E]+_)?[0-9a-eA-E]+)+|16#(([0-9a-fA-F]+_)?[0-9a-fA-F]+)+|17#(([0-9a-gA-G]+_)?[0-9a-gA-G]+)+|18#(([0-9a-hA-H]+_)?[0-9a-hA-H]+)+|19#(([0-9a-iA-I]+_)?[0-9a-iA-I]+)+|20#(([0-9a-jA-J]+_)?[0-9a-jA-J]+)+|21#(([0-9a-kA-K]+_)?[0-9a-kA-K]+)+|22#(([0-9a-lA-L]+_)?[0-9a-lA-L]+)+|23#(([0-9a-mA-M]+_)?[0-9a-mA-M]+)+|24#(([0-9a-nA-N]+_)?[0-9a-nA-N]+)+|25#(([0-9a-oA-O]+_)?[0-9a-oA-O]+)+|26#(([0-9a-pA-P]+_)?[0-9a-pA-P]+)+|27#(([0-9a-qA-Q]+_)?[0-9a-qA-Q]+)+|28#(([0-9a-rA-R]+_)?[0-9a-rA-R]+)+|29#(([0-9a-sA-S]+_)?[0-9a-sA-S]+)+|30#(([0-9a-tA-T]+_)?[0-9a-tA-T]+)+|31#(([0-9a-uA-U]+_)?[0-9a-uA-U]+)+|32#(([0-9a-vA-V]+_)?[0-9a-vA-V]+)+|33#(([0-9a-wA-W]+_)?[0-9a-wA-W]+)+|34#(([0-9a-xA-X]+_)?[0-9a-xA-X]+)+|35#(([0-9a-yA-Y]+_)?[0-9a-yA-Y]+)+|36#(([0-9a-zA-Z]+_)?[0-9a-zA-Z]+)+|((\\d+_)?\\d+)+"
		},
		{
			"name": "entity.name.scope-resolution.laye",
			"match": "(?<=\\bimport\\b\\s+(([a-zA-Z0-9_]+|\".*?\")\\s*::\\s*)*(([a-zA-Z0-9_]+|\".*?\")\\s+\\bas\\b\\s+)?)\\b[a-zA-Z0-9_]+\\b(?!.+\\bfrom\\b)|(?<=\\bimport\\b\\s*\\*\\s*\\bfrom\\b\\s+(([a-zA-Z0-9_]+|\".*?\")\\s*::\\s*)*(([a-zA-Z0-9_]+|\".*?\")\\s+\\bas\\b\\s+)?)\\b[a-zA-Z0-9_]+\\b|(?<=\\bfrom\\b\\s+(([a-zA-Z0-9_]+|\".*?\")\\s*::\\s*)*)\\b[a-zA-Z0-9_]+\\b|\\b[a-zA-Z0-9_]+\\b(?=\\s*::)"
		},
		{
			"name": "entity.name.type.laye",
			"match": "(?<=\\b(struct|variant|enum|alias)\\b\\s+)\\b[a-zA-Z0-9_]+\\b|\\b[a-zA-Z0-9_]+\\b(?=\\s+\\b(read|write)only\\b|[\\s*?\\[\\]]+\\b[a-zA-Z0-9_]+\\b\\s*[^a-zA-Z0-9_\\s.,\\]\"])"
		},
		{
			"name": "entity.name.function.laye",
			"match": "\\b[a-zA-Z0-9_]+\\b(?=\\s*\\()"
		},
		{
			"name": "variable.other.constant.laye",
			"match": "\\b[A-Z0-9_]+\\b|(?<=\\b(const|(read|write)only)\\b(\\s+\\b[a-zA-Z0-9_]+\\b)?[\\s*?\\[\\]]+)\\b[a-zA-Z0-9_]+\\b"
		},
		{
			"name": "variable.laye",
			"match": "\\b[a-zA-Z0-9_]+\\b"
		}
	],
	"repository": {
		"escape": {
			"name": "constant.character.escape.laye",
			"match": "\\\\([\\\\0abefnrtv]|x[0-7][0-9A-Fa-f]|o[0-1]?[0-7]{1,2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})"
		}
	},
	"scopeName": "source.laye"
}
