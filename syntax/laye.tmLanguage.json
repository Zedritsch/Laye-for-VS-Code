{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Laye",
	"patterns": [
		{
			"name": "comment.block.laye",
			"begin": "/\\*",
			"end": "\\*/"
		},
		{
			"name": "comment.line.double-slash.laye",
			"match": "//.*"
		},
		{
			"name": "keyword.directive.laye",
			"match": "\\b(import|export)\\b"
		},
		{
			"name": "storage.modifier.laye",
			"match": "\\b(const|inline|readonly|writeonly)\\b"
		},
		{
			"name": "storage.type.laye",
			"match": "\\b(var|void|noreturn|rawptr|bool|(b\\d+)|int|(i\\d+)|uint|(u\\d+)|float|f16|f32|f64|f80|f128|struct|variant|enum)\\b"
		},
		{
			"name": "storage.laye",
			"match": "\\b(varargs|foreign|callconv|test)\\b"
		},
		{
			"name": "keyword.control.conditional.laye",
			"match": "\\b(if|else|switch|case|default)\\b"
		},
		{
			"name": "keyword.control.loop.laye",
			"match": "\\b(for|do)\\b"
		},
		{
			"name": "keyword.control.flow.laye",
			"match": "\\b(return|break|continue|defer|goto)\\b"
		},
		{
			"name": "keyword.control.laye",
			"match": "\\b(new|delete|cast|try|catch|discard|sizeof|alignof|offsetof|not|and|or|xor)\\b"
		},
		{
			"name": "keyword.operator.assignment.logical.laye",
			"match": "&=|\\|=|~=|<<=|>>="
		},
		{
			"name": "keyword.operator.assignment.arithmetic.laye",
			"match": "\\+=|-=|\\*=|/=|%="
		},
		{
			"name": "keyword.operator.logical.laye",
			"match": "<<|>>|[&|~]"
		},
		{
			"name": "keyword.operator.arithmetic.laye",
			"match": "[+\\-*/%]"
		},
		{
			"name": "keyword.operator.relational.laye",
			"match": "==|!=|<=|>="
		},
		{
			"name": "keyword.operator.laye",
			"match": "=>|=|\\?"
		},
		{
			"name": "constant.language.laye",
			"match": "\\b(nil|global)\\b"
		},
		{
			"name": "constant.language.boolean.laye",
			"match": "\\b(true|false)\\b"
		},
		{
			"name": "string.quoted.single.laye",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.laye",
					"match": "\\\\'"
				},
				{
					"include": "#escape"
				}
			]
		},
		{
			"name": "string.quoted.double.laye",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.laye",
					"match": "\\\\\""
				},
				{
					"include": "#escape"
				}
			]
		},
		{
			"name": "punctuation.definition.laye",
			"match": "[\\(\\)\\[\\]\\{\\}]"
		},
		{
			"name": "punctuation.separator.laye",
			"match": "::|[.,;]"
		},
		{
			"name": "constant.numeric.laye",
			"match": "\\b((\\d+_)?\\d+)+\\b"
		},
		{
			"name": "entity.name.type.laye",
			"match": "(?<=\\b(struct|variant|enum)\\b\\s+)\\b[a-zA-Z0-9_]+\\b"
		},
		{
			"name": "entity.name.function.laye",
			"match": "\\b[a-zA-Z0-9_]+\\b(?=\\s*\\()"
		},
		{
			"name": "variable.other.constant.laye",
			"match": "\\b[A-Z0-9_]+\\b"
		},
		{
			"name": "variable.laye",
			"match": "\\b[a-zA-Z0-9_]+\\b"
		}
	],
	"repository": {
		"escape": {
			"name": "constant.character.escape.laye",
			"match": "\\\\([\\\\0abefntv]|x[0-7][0-9A-Fa-f]|o[0-1]?[0-7]{1,2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})"
		}
	},
	"scopeName": "source.laye"
}
