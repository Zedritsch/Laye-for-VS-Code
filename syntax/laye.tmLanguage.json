{
	"name": "Laye",
	"patterns": [
		{ "include": "#punctuation" },
		{ "include": "#comment" },
		{ "include": "#keyword" },
		{ "include": "#operator" },
		{ "include": "#number" },
		{ "include": "#string" },
		{ "include": "#namespace" },
		{ "include": "#type" },
		{ "include": "#function" },
		{ "include": "#variable.readonly" },
		{ "include": "#variable" }
	],
	"repository": {
		"punctuation": {
			"name": "punctuation.laye",
			"match": "::|[(),.:;\\[\\]{}]|(?<=[0-9A-Z_a-z]\\s*)<(?=[\\s,0-9A-Z_a-z]*>)|(?<=[0-9A-Z_a-z]\\s*<[\\s,0-9A-Z_a-z]*)>"
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.laye",
					"begin": "/\\*",
					"end": "\\*/",
					"patterns": [
						{
							"begin": "/\\*",
							"end": "\\*/"
						},
						{
							"match": "\\\\`"
						},
						{
							"name": "meta.embedded.laye",
							"begin": "`",
							"end": "`",
							"patterns": [
								{ "include": "$self" }
							]
						},
						{
							"name": "keyword.laye",
							"match": "@(?:author|deprecated|param|return|see|since)\\b"
						},
						{
							"name": "variable.other.constant.laye",
							"match": "(?<=@author\\s+)[\\-.0-9A-Z_a-z]+\\b"
						},
						{
							"name": "variable.parameter.laye",
							"match": "(?<=@param\\s+[0-9A-Z_a-z]+\\s*(?:<[\\s,0-9A-Z_a-z]*>\\s*)?)[0-9A-Z_a-z]+\\b"
						},
						{
							"name": "entity.name.type.laye",
							"match": "(?<=@(?:param|return)\\s+(?:[0-9A-Z_a-z]+\\s*<(?:[\\s,0-9A-Z_a-z]+,)?\\s*)?)[0-9A-Z_a-z]+\\b"
						},
						{
							"name": "constant.numeric.laye",
							"match": "(?<=@since\\s+)[\\-.0-9A-Z_a-z]+\\b"
						}
					]
				},
				{
					"name": "comment.laye",
					"match": "//.*"
				}
			]
		},
		"keyword": {
			"patterns": [
				{
					"name": "keyword.laye",
					"match": "\\b(?:alias|alignof|and|as|assert|break|cast|catch|callconv|case|const|continue|default|defer|delete|discard|discardable|do|else|enum|export|fallthrough|for|foreign|from|goto|if|import|inline|is|mut|new|not|offsetof|operator|or|return|sizeof|struct|switch|test|try|unreachable|varargs|variant|xor|xyzzy|yield)\\b"
				},
				{
					"name": "constant.language.laye",
					"match": "\\b(?:false|global|nil|true)\\b"
				},
				{
					"name": "storage.type.laye",
					"match": "\\b(?:bool|[biu]\\d+|f(?:loat|16|32|64|80|128)|int|noreturn|uint|var|void)\\b"
				}
			]
		},
		"operator": {
			"name": "keyword.operator.laye",
			"match": "\\?|=>|(?:<<|>>|[!%&*+\\-/<=>|~])=?"
		},
		"number": {
			"name": "constant.numeric.laye",
			"match": "\\b(?:1(?:0#(?:[0-9]+_)*[0-9]+|1#(?:[0-9aA]+_)*[0-9aA]+|2#(?:[0-9abAB]+_)*[0-9a-bA-B]+|3#(?:[0-9a-cA-C]+_)*[0-9a-cA-C]+|4#(?:[0-9a-dA-D]+_)*[0-9a-dA-D]+|5#(?:[0-9a-eA-E]+_)*[0-9a-eA-E]+|6#(?:[0-9a-fA-F]+_)*[0-9a-fA-F]+|7#(?:[0-9a-gA-G]+_)*[0-9a-gA-G]+|8#(?:[0-9a-hA-H]+_)*[0-9a-hA-H]+|9#(?:[0-9a-iA-I]+_)*[0-9a-iA-I]+)|2(?:#(?:[01]+_)*[01]+|0#(?:[0-9a-jA-J]+_)*[0-9a-jA-J]+|1#(?:[0-9a-kA-K]+_)*[0-9a-kA-K]+|2#(?:[0-9a-lA-L]+_)*[0-9a-lA-L]+|3#(?:[0-9a-mA-M]+_)*[0-9a-mA-M]+|4#(?:[0-9a-nA-N]+_)*[0-9a-nA-N]+|5#(?:[0-9a-oA-O]+_)*[0-9a-oA-O]+|6#(?:[0-9a-pA-P]+_)*[0-9a-pA-P]+|7#(?:[0-9a-qA-Q]+_)*[0-9a-qA-Q]+|8#(?:[0-9a-rA-R]+_)*[0-9a-rA-R]+|9#(?:[0-9a-sA-S]+_)*[0-9a-sA-S]+)|3(?:#(?:[0-2]+_)*[0-2]+|0#(?:[0-9a-tA-T]+_)*[0-9a-tA-T]+|1#(?:[0-9a-uA-U]+_)*[0-9a-uA-U]+|2#(?:[0-9a-vA-V]+_)*[0-9a-vA-V]+|3#(?:[0-9a-wA-W]+_)*[0-9a-wA-W]+|4#(?:[0-9a-xA-X]+_)*[0-9a-xA-X]+|5#(?:[0-9a-yA-Y]+_)*[0-9a-yA-Y]+|6#(?:[0-9a-zA-Z]+_)*[0-9a-zA-Z]+)|4#(?:[0-3]+_)*[0-3]+|5#(?:[0-4]+_)*[0-4]+|6#(?:[0-5]+_)*[0-5]+|7#(?:[0-6]+_)*[0-6]+|8#(?:[0-7]+_)*[0-7]+|9#(?:[0-8]+_)*[0-8]+|(?:\\d+_)*(?:\\d+\\.)?\\d+)\\b"
		},
		"escape": {
			"name": "constant.character.escape.laye",
			"match": "\\\\(?:[\\\\0abefnrtv]|x[0-7][0-9a-fA-F]|o[0-1]?[0-7]{1,2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})"
		},
		"string": {
			"patterns": [
				{
					"name": "string.laye",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.laye",
							"match": "\\\\\""
						},
						{ "include": "#escape" },
						{
							"name": "constant.other.placeholder.laye",
							"match": "%[\\+#]*\\d*(?:\\.\\d+)?(?:hh|ll|l)?[%EGXc-gopsux]"
						},
						{
							"name": "invalid.laye",
							"match": "[\\\\%]."
						}
					]
				},
				{
					"name": "string.laye",
					"begin": "'",
					"end": "'",
					"patterns": [
						{
							"name": "constant.character.escape.laye",
							"match": "\\\\'"
						},
						{ "include": "#escape" },
						{
							"name": "invalid.laye",
							"match": "\\\\."
						}
					]
				}
			]
		},
		"namespace": {
			"name": "entity.name.namespace.laye",
			"match": "\\b[0-9A-Z_a-z]+(?=::)|(?<=\\bimport\\s+(?:[\\s*,0-9A-Z_a-z]+\\sfrom\\s+(?:\"[0-9A-Z_a-z]+\"\\s+as\\s+)?)?)[0-9A-Z_a-z]+\\b"
		},
		"type": {
			"name": "entity.name.type.laye",
			"match": "(?<=\\b(?:alias|const|enum|struct|variant)\\s+)[0-9A-Z_a-z]+\\b|(?<![.0-9A-Z_a-z]\\s*)\\b[0-9A-Z_a-z]+\\b(?!\\s*(?:and|is|x?or)\\b)(?=(?:\\s*<[\\s,0-9A-Z_a-z]*>)?[\\s&*?\\[\\]]*[0-9A-Z_a-z{])|(?<=<(?:[\\s,0-9A-Z_a-z]+,)?\\s*)[0-9A-Z_a-z]+(?=\\s*[,>])"
		},
		"function": {
			"name": "entity.name.function.laye",
			"match": "\\b[0-9A-Z_a-z]+(?=\\s*\\()"
		},
		"variable.readonly": {
			"name": "variable.other.constant.laye",
			"match": "(?<=\\bconst\\s+[\\s,0-9A-Z_a-z<>]+\\s+)[0-9A-Z_a-z]+\\b|\\b[0-9_]*[A-Z][0-9A-Z_a-z]*\\b"
		},
		"variable": {
			"name": "variable.laye",
			"match": "\\b[0-9A-Z_a-z]+\\b"
		}
	},
	"scopeName": "source.laye"
}